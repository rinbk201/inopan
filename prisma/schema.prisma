// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

// model User {
//   id            String       @default(cuid()) @id
//   name          String?
//   email         String?   @unique
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//   posts         Post[]
//   @@map(name: "users")
// }

// --追加-- 2023/10/07/15:18 田中

//--データ構造--

//ログインユーザー情報？
 model User {
  user_ID Int @id
  email String
  password String //"hash"
  role_user_id Int //reference
  created_at DateTime
  deleted_at DateTime
 }

//ユーザーの権限
//@COMMENT 列挙で省略可能?
 model Role_User {
  id Int @id
  role String //"管理者,一般ユーザー"
 }

//ユーザーの情報
model User_Info{
  id  Int @id
  name  String
  email  String  
  display_name String 
  affiliation_id Int //reference 
  lab String 
  gender String 
  hobby String  
  comment String  
  DiscordID String  
  XID String 
  FaceBookID String  
  free_form  String 
  created_at DateTime 
  deleted_at DateTime
}

//学部・学科
model Affrilation{
  id  Int  @id
  faculty String  
  major String  
  initial AffrilationInitial
}

//ユーザーの持つスキル(skills)
model HavingSkills {
  id  Int @id
  user_info_ID Int //FK,reference
  skill_ID  Int //FK,reference
  level Levels  
 }

//スキル
 model Skill {
  id Int @id
  skill_field  SkillFields //"企画力,デザイン,フロントエンド,バックエンド,プレゼン力等"
 }

//ユーザーの習得したプログラミング言語(programming_languages)
 model HavingLanguages{
  id Int @id
  user_info_ID Int //FK,reference
  language_ID Int //reference
  level Levels 
 }

//このシステムにおけるプログラミング言語の詳細
model Language {
  id Int @id
  language ProgrammingLanguages
	area Int // "0:バックエンド,1:フロントエンド or 新しくテーブル作るか"
 }

//ユーザーの興味のある業界
 model Interested_Industory {
  id Int @id
  user_info_ID Int //FK,reference
  industory_field  Industorys //FK,reference
  level Levels
 }

//このシステムにおける業界の詳細
// @COMMENT データの付随をさせない場合，列挙で定義できるのでいらない気がします
model Industory {
  id Int @id
  name String 
 }

//募集イベント
model Posts {
  id Int @id
  user_info_ID Int  //FK,reference
  title String 
  launchDate DateTime 
  deadlineDate DateTime  
  recruitment_numbers Int 
  description String 
  matching_message String 
  created_at DateTime
  modifyed_at DateTime
  deleted_at DateTime
 }

//要求されるプログラミング言語
//モデル
 model Requirement_Languages {
  id Int @id
  posts_ID Int //reference
  // language Langages　//reference
 }

//ポストのログ
model Logs {
  id  Int @id
  posts_id Int //FK,reference
  // user_info User_Info //FK,reference
  created_at DateTime
  deleted_at DateTime
}

//ポストに残るリアクション(Reactions)
model Postted_Reactions {
  id Int @id 
  logs_ID Int //FK,reference
  reaction_ID Int //FK
 }

//リアクションの詳細
model Reaction {
  id Int @id
  reaction_name String //"宜しく or 一緒に頑張ろう or 楽しみましょう"
 }

//興味を表明したポスト
model Interested_Posts {
  id Int @id
  user_info_ID Int //FK , "興味ありした人のUser_info_id.user_info_idで検索すればユーザーが興味ありしたポスト情報が取得可能"
  posts_id Int //FK , "Post_idで検索すればpostに対して興味ありした人を取得可能"
  interest_level_id Int //FK
 }

model Interested_Level {
  id Int @id
  state String  //"興味あり or 緩くやりたい or がちでやりたい"
 }

model Participants {
  id Int @id
  posts_ID Int //reference
  user_info_ID Int //reference"参加者のuser_info_id"
 }

// --列挙型部分--

//学部学科略称のリスト
enum AffrilationInitial{
  // 工学部
  EJ//電気電子工学科
  EH//電子システム工学科
  ES//応用化学科
  EK//機械工学科
  EF//先端機械工学科
  EC//情報通信工学科

  // 工学部第二部
  NE//電気電子工学科
  NM//機械工学科
  NC//情報通信工学科

  // 未来科学部
  FA//建築学科
  FI//情報メディア学科
  FR//ロボット・メカトロニクス学科

  // システムデザイン工学部
  AJ//情報システム工学科
  AD//デザイン工学科

  // 情報環境学部
  JK//情報環境学科

  // 理工学部理工学科
  RU//理学系
  RB//生命科学系
  RD//情報システムデザイン学系
  RM//機械工学系
  RE//電子工学系
  RG//建築・都市環境学系
  RL//共通教育群
}

//ユーザーの保有スキルのフィールド
enum SkillFields{
  PLANNING
  DESIGN
  FRONTEND
  BACKEND
  PRESENTATION
  OTHER
}

//保有スキル・取得言語のレベル
enum Levels{
  LEVEL0
  LEVEL1
  LEVEL2
  LEVEL3
  LEVEL4
  LEVEL5
}

//プログラミング言語
enum ProgrammingLanguages{
  C_Cpp // C/C++
  Csharp // C#
  Java
  Python
  JavaScript
  OTHER
}

//業界
enum Industorys{
  WEB
  GAME
  SI
  CHEMISTRY
  ADVERTISEMENT
  OTHER
}
